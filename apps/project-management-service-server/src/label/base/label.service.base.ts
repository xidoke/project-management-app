/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Label as PrismaLabel,
  IssueLabel as PrismaIssueLabel,
} from "@prisma/client";

export class LabelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LabelCountArgs, "select">): Promise<number> {
    return this.prisma.label.count(args);
  }

  async labels(args: Prisma.LabelFindManyArgs): Promise<PrismaLabel[]> {
    return this.prisma.label.findMany(args);
  }
  async label(args: Prisma.LabelFindUniqueArgs): Promise<PrismaLabel | null> {
    return this.prisma.label.findUnique(args);
  }
  async createLabel(args: Prisma.LabelCreateArgs): Promise<PrismaLabel> {
    return this.prisma.label.create(args);
  }
  async updateLabel(args: Prisma.LabelUpdateArgs): Promise<PrismaLabel> {
    return this.prisma.label.update(args);
  }
  async deleteLabel(args: Prisma.LabelDeleteArgs): Promise<PrismaLabel> {
    return this.prisma.label.delete(args);
  }

  async findIssueLabels(
    parentId: string,
    args: Prisma.IssueLabelFindManyArgs
  ): Promise<PrismaIssueLabel[]> {
    return this.prisma.label
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .issueLabels(args);
  }
}
