/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProjectMember as PrismaProjectMember,
  Project as PrismaProject,
  User as PrismaUser,
} from "@prisma/client";

export class ProjectMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectMember.count(args);
  }

  async projectMembers(
    args: Prisma.ProjectMemberFindManyArgs
  ): Promise<PrismaProjectMember[]> {
    return this.prisma.projectMember.findMany(args);
  }
  async projectMember(
    args: Prisma.ProjectMemberFindUniqueArgs
  ): Promise<PrismaProjectMember | null> {
    return this.prisma.projectMember.findUnique(args);
  }
  async createProjectMember(
    args: Prisma.ProjectMemberCreateArgs
  ): Promise<PrismaProjectMember> {
    return this.prisma.projectMember.create(args);
  }
  async updateProjectMember(
    args: Prisma.ProjectMemberUpdateArgs
  ): Promise<PrismaProjectMember> {
    return this.prisma.projectMember.update(args);
  }
  async deleteProjectMember(
    args: Prisma.ProjectMemberDeleteArgs
  ): Promise<PrismaProjectMember> {
    return this.prisma.projectMember.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.projectMember
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.projectMember
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
