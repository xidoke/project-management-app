/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  IssueLabel as PrismaIssueLabel,
  Issue as PrismaIssue,
  Label as PrismaLabel,
} from "@prisma/client";

export class IssueLabelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IssueLabelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.issueLabel.count(args);
  }

  async issueLabels(
    args: Prisma.IssueLabelFindManyArgs
  ): Promise<PrismaIssueLabel[]> {
    return this.prisma.issueLabel.findMany(args);
  }
  async issueLabel(
    args: Prisma.IssueLabelFindUniqueArgs
  ): Promise<PrismaIssueLabel | null> {
    return this.prisma.issueLabel.findUnique(args);
  }
  async createIssueLabel(
    args: Prisma.IssueLabelCreateArgs
  ): Promise<PrismaIssueLabel> {
    return this.prisma.issueLabel.create(args);
  }
  async updateIssueLabel(
    args: Prisma.IssueLabelUpdateArgs
  ): Promise<PrismaIssueLabel> {
    return this.prisma.issueLabel.update(args);
  }
  async deleteIssueLabel(
    args: Prisma.IssueLabelDeleteArgs
  ): Promise<PrismaIssueLabel> {
    return this.prisma.issueLabel.delete(args);
  }

  async getIssue(parentId: string): Promise<PrismaIssue | null> {
    return this.prisma.issueLabel
      .findUnique({
        where: { id: parentId },
      })
      .issue();
  }

  async getLabel(parentId: string): Promise<PrismaLabel | null> {
    return this.prisma.issueLabel
      .findUnique({
        where: { id: parentId },
      })
      .label();
  }
}
